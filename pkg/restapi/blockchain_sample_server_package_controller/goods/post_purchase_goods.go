// Code generated by go-swagger; DO NOT EDIT.

package goods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostPurchaseGoodsHandlerFunc turns a function with the right signature into a post purchase goods handler
type PostPurchaseGoodsHandlerFunc func(PostPurchaseGoodsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPurchaseGoodsHandlerFunc) Handle(params PostPurchaseGoodsParams) middleware.Responder {
	return fn(params)
}

// PostPurchaseGoodsHandler interface for that can handle valid post purchase goods params
type PostPurchaseGoodsHandler interface {
	Handle(PostPurchaseGoodsParams) middleware.Responder
}

// NewPostPurchaseGoods creates a new http.Handler for the post purchase goods operation
func NewPostPurchaseGoods(ctx *middleware.Context, handler PostPurchaseGoodsHandler) *PostPurchaseGoods {
	return &PostPurchaseGoods{Context: ctx, Handler: handler}
}

/* PostPurchaseGoods swagger:route POST /purchaseGoods Goods postPurchaseGoods

PostPurchaseGoods post purchase goods API

*/
type PostPurchaseGoods struct {
	Context *middleware.Context
	Handler PostPurchaseGoodsHandler
}

func (o *PostPurchaseGoods) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPurchaseGoodsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostPurchaseGoodsBody post purchase goods body
//
// swagger:model PostPurchaseGoodsBody
type PostPurchaseGoodsBody struct {

	// goods key
	Key string `json:"key,omitempty"`

	// wallet Id
	WalletID string `json:"walletId,omitempty"`
}

// Validate validates this post purchase goods body
func (o *PostPurchaseGoodsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post purchase goods body based on context it is used
func (o *PostPurchaseGoodsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostPurchaseGoodsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPurchaseGoodsBody) UnmarshalBinary(b []byte) error {
	var res PostPurchaseGoodsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostPurchaseGoodsOKBody post purchase goods o k body
//
// swagger:model PostPurchaseGoodsOKBody
type PostPurchaseGoodsOKBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post purchase goods o k body
func (o *PostPurchaseGoodsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post purchase goods o k body based on context it is used
func (o *PostPurchaseGoodsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostPurchaseGoodsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPurchaseGoodsOKBody) UnmarshalBinary(b []byte) error {
	var res PostPurchaseGoodsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
